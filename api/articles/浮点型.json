{"title":"浮点型","uid":"7f367b0fa41ebe2c6c61fe40a4e92fbd","slug":"浮点型","date":"2023-02-18T13:40:31.000Z","updated":"2023-02-18T17:32:23.812Z","comments":true,"path":"api/articles/浮点型.json","keywords":null,"cover":"/photos/blog3.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre class=\"line-numbers language-none\"><code class=\"language-none\">🐰作者简介：一位普通高校的在校学生，致力于提高自己的编程能力。\n🍌个人主页：[比昨天强一點的博客_CSDN博客-领域博主](https:&#x2F;&#x2F;c-p-p.blog.csdn.net&#x2F; &quot;比昨天强一點的博客_CSDN博客-领域博主&quot;)\n🍍系列专栏：[C语言从0到精通_比昨天强一點的博客-CSDN博客](https:&#x2F;&#x2F;blog.csdn.net&#x2F;m0_63125842&#x2F;category_12057278.html &quot;C语言从0到精通_比昨天强一點的博客-CSDN博客&quot;)\n🏷️学习格言：无人问津的日子，最是提高自己的好时机。</code></pre></blockquote>\n<p>​         学过编程语言的都知道，浮点型是有精度问题的。（说人话它实际值与我们想要存入的的值是有细微误差的）。接下来我的讲解将让你对于浮点型的了解更加深入。</p>\n<h3 id=\"废话不多说，先看一个例子。（基于C语言）\"><a href=\"#废话不多说，先看一个例子。（基于C语言）\" class=\"headerlink\" title=\"废话不多说，先看一个例子。（基于C语言）\"></a>废话不多说，先看一个例子。（基于C语言）</h3><p>c语言中浮点型有两种</p>\n<p>1.单精度浮点型（float）</p>\n<p>2.双精度浮点型（double）</p>\n<p>先看一段代码</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n\n\nint mian()&#123;\n\n    float a &#x3D; 0.1f; &#x2F;&#x2F;以单精度浮点型的方式初始化 单单一个小数，是会被默认为double类型的。\n    double b &#x3D; 0.1; \n\n    printf(&quot;%.30f\\n&quot;,a);&#x2F;&#x2F;以单精度浮点型输出并保留30位小数\n    printf(&quot;%.30lf\\n&quot;); &#x2F;&#x2F;以双精度浮点型输出并保留30位小数\n\n&#125;</code></pre>\n\n<p><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\"></p>\n<h3 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h3><p><img src=\"https://img-blog.csdnimg.cn/743789d0303349b095108a48c68fcfd5.png\" alt=\"743789d0303349b095108a48c68fcfd5.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<p>单单从结果上看，同是浮点型，double 和 float也是有区别的，而且<strong>可以看出double比float精度要高。</strong></p>\n<h3 id=\"接下来我来给大家解释一下浮点型为什么表现出这样的特性呢。\"><a href=\"#接下来我来给大家解释一下浮点型为什么表现出这样的特性呢。\" class=\"headerlink\" title=\"接下来我来给大家解释一下浮点型为什么表现出这样的特性呢。\"></a>接下来我来给大家解释一下浮点型为什么表现出这样的特性呢。</h3><p>首先看一段话</p>\n<h3 id=\"浮点数在计算机内部的表现方法：\"><a href=\"#浮点数在计算机内部的表现方法：\" class=\"headerlink\" title=\"浮点数在计算机内部的表现方法：\"></a>浮点数在计算机内部的表现方法：</h3><p><strong>根据国际标准IEEE（电气和电子工程协会）754，任意一个二进制浮点数V可以表示成下面的形式：</strong></p>\n<p><em><em>(-1)^S</em> M * 2^E</em>*</p>\n<p><strong>(-1)^s表示符号位，当S&#x3D;0，V为正数；当s&#x3D;1，V为负数。</strong></p>\n<p><strong>M表示有效数字，大于等于1，小于2。</strong></p>\n<p><strong>2^E表示指数位。</strong></p>\n<p><strong>举例来说：十进制的5.0，写成二进制是101.0，相当于1.01*2^2。那么，按照上面v的格式，可以得出s &#x3D; 0， M &#x3D; 1.01， E &#x3D; 2。</strong></p>\n<p><strong>十进制的-5.0，写成二进制是-101.0，相当于-1.01*2^2。那么，S &#x3D; 1，M &#x3D; 1.01， E &#x3D; 2。</strong></p>\n<p>接下来我将用画图的方式给未来大🐮们讲解一下这个标准。</p>\n<p><strong>EEE 754规定：对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</strong></p>\n<p><strong>如图：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/8c9fa49777a64a39b0138b0e39b2475a.png\" alt=\"8c9fa49777a64a39b0138b0e39b2475a.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<h1 id=\"1-S-M-2-E\"><a href=\"#1-S-M-2-E\" class=\"headerlink\" title=\"(-1)^S M * 2^E*\"></a><em><em>(-1)^S</em> M * 2^E</em>*</h1><p><strong>IEEE 754对有效数字M和指数E，还有一些特别规定。前面说过，1&lt; M（有效数字）&lt;2，也就是说，M可以写成 1.xxxxxx 的形式，其中Xxxxxx表示小数部分。</strong></p>\n<p><strong>IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。(最初设计计算机的那帮人物，总是想方设法更有效的利用计算机)</strong></p>\n<p><strong>以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。（这样精度也就提高了， 数据相对更精确）。</strong></p>\n<p><strong>至于指数E，情况就比较复杂。</strong></p>\n<p><strong>首先，E为一个无符号整数（unsigned int ）这意味着，如果E为8位，它的取值范围为0-255；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。比如，2^10的E 是10，所以保存成32位浮点数时，必须保存成10+127&#x3D;137，即10001001。（再比如十进制0.5 &#x3D; (-1)^0 * 1.0 * 2^-1  所以保存成32位浮点数时，必须保存成  -1 + 127 &#x3D; 126，即 01111110）。</strong></p>\n<h2 id=\"回归文章最初，我们以十进制0-1为例\"><a href=\"#回归文章最初，我们以十进制0-1为例\" class=\"headerlink\" title=\"回归文章最初，我们以十进制0.1为例\"></a><strong>回归文章最初，我们以十进制0.1为例</strong></h2><p><strong>我们可以通过进制转换工具知道：如图</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/e65d021047c049e087d9e948e74367d8.png\" alt=\"e65d021047c049e087d9e948e74367d8.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<p>转换结果我们又可以写成1.100110011…. * 2^-4 (对应于标准 S &#x3D; 0，M &#x3D; 1.100110011…. ， E（真实值） &#x3D; -4 )</p>\n<p>因为E的标准 所以E在内存中存储的是 -4 + 127 &#x3D; 123   对应的二进制 01111011</p>\n<p>所以在内存中十进制0.1以单精度浮点型（float）被存储为：如图</p>\n<p>重点：有效数字M末尾一位是要根据情况进位的（后一位为1则截断的位置要进位）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/ff7b9e4986e643ac9b577ff93d4fef73.png\" alt=\"ff7b9e4986e643ac9b577ff93d4fef73.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<p>对于有效数字M其实就是如下图（这串数字是十进制的0.1在二进制中的表现方式）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/1d47a3d5880d4aaea7c7252eb4766ad6.png\" alt=\"1d47a3d5880d4aaea7c7252eb4766ad6.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<h2 id=\"到此我们对于单精度浮点数如何存就已经讲完了，接下来就是取出来。\"><a href=\"#到此我们对于单精度浮点数如何存就已经讲完了，接下来就是取出来。\" class=\"headerlink\" title=\"到此我们对于单精度浮点数如何存就已经讲完了，接下来就是取出来。\"></a>到此我们对于单精度浮点数如何存就已经讲完了，接下来就是取出来。</h2><p><strong>对于取：指数E从内存中取出还可以再分成三种情况：</strong></p>\n<p><strong>E不全为0或不全为1</strong></p>\n<p>这时，浮点数就采用下面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将有效数字M前加上第一位的1。比如：0.5（1&#x2F;2）的二进制形式为0.1，由于规定正数部分必须为1，即将小数点右移1位， 则为1.0*2^（-1)，其阶码为-1+127&#x3D;126， 表示为01111110，而尾数1.0去掉整数部分为0，补齐0到23位 00000000000000000000000，则其二进制表示形式为：</p>\n<p>0 01111110 00000000000000000000000</p>\n<p><strong>E全为0 （真实值 + 127 &#x3D;&#x3D; 0 ）</strong></p>\n<p>这时，浮点数的指数E等于1-127（或者1-1023）即为真实值，有效数字M不再加上第一位的1，而是还原为 0。xxxxxx的小数。这样做是为了表示土0，以及接近于0的很小的数字。（真实值 为-127  也就是 2^-127 这个数非常非常的小）</p>\n<p><strong>E全为1 （真实值 + 127 &#x3D;&#x3D; 255）</strong></p>\n<p>这时，如果有效数字M全为0，表示正负无穷大（正负取决于符号位s）（真实值 为128  也就是 2^128 这个数非常非常的大）</p>\n<h2 id=\"此时我们回归文章开头。\"><a href=\"#此时我们回归文章开头。\" class=\"headerlink\" title=\"此时我们回归文章开头。\"></a><strong>此时我们回归文章开头。</strong></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n\n\nint mian()&#123;\n\n    float a &#x3D; 0.1f; &#x2F;&#x2F;以单精度浮点型的方式初始化 单单一个小数，是会被默认为double类型的。\n    double b &#x3D; 0.1; \n\n    printf(&quot;%.30f\\n&quot;,a);&#x2F;&#x2F;以单精度浮点型输出并保留30位小数\n    printf(&quot;%.30lf\\n&quot;); &#x2F;&#x2F;以双精度浮点型输出并保留30位小数\n\n&#125;</code></pre>\n\n<p><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\"></p>\n<h3 id=\"输出结果-1\"><a href=\"#输出结果-1\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h3><p><img src=\"https://img-blog.csdnimg.cn/743789d0303349b095108a48c68fcfd5.png\" alt=\"743789d0303349b095108a48c68fcfd5.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<p>十进制0.1以单精度浮点型（float）存储：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/ff7b9e4986e643ac9b577ff93d4fef73.png\" alt=\"ff7b9e4986e643ac9b577ff93d4fef73.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<p>我们计算一下这个二进制。</p>\n<p>S &#x3D; 0</p>\n<p>E &#x3D; 真实值 + 127 &#x3D; （二进制）01111011 &#x3D; 123   真实值 - 4</p>\n<p>M &#x3D; 1.10011001100110011001101 ( 1.有效数字)</p>\n<p>代入标准公式  <em><em>(-1)^S</em> M * 2^E  &#x3D;  2^-4 * M &#x3D;  0.000110011001100110011001101（二进制）</em>*</p>\n<p><strong>转换为十进制</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/8295c7fb073644b19cf2e50daf1d496d.png\" alt=\"8295c7fb073644b19cf2e50daf1d496d.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<p><strong>对比转换结果（四舍五入）和我们输出的第一行是一致的</strong></p>\n<p><strong>至此单精度浮点型在内存上的本质就讲完了。而对于双精度浮点型是雷同的。仅仅只是E（指数位）和M（有效数字）的位数不同。</strong></p>\n<p><strong>如图：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/55dbadf206a74c129232975c0377bf50.png\" alt=\"55dbadf206a74c129232975c0377bf50.png\"><img src=\"/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22\">​<strong>编辑</strong></p>\n<p>可以看到双精度的有效数字位数非常的长有52位，这也就是双精度浮点型更精确的原因所在。</p>\n<p>而对于双精度浮点型的存取与单精度浮点型存取换汤不换药，所以我坚信你通过单精度的例子能够明白双精度如何存取。我就不再赘述。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre class=\"line-numbers language-none\"><code class=\"language-none\">这是我第一次写博客，如果在布局排版或者其它方面有什么让您感到不舒服的地方，欢迎您指出，或者文章有讲的不好或者错误的地方，请您不吝赐教，指出我的错误，这将对我提供很大的帮助，谢谢！</code></pre></blockquote>\n<p>​</p>\n","feature":true,"text":" 🐰作者简介：一位普通高校的在校学生，致力于提高自己的编程能力。 🍌个人主页：[比昨天强一點的博客_CSDN博客-领域博主](https:&#x2F;&#x2F;c-p-p.blog.csdn.net&#x2F; &quot;比昨天强一點的博客_CSDN博客-领域博主&quot;...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"},{"name":"数据类型","slug":"数据类型","count":1,"path":"api/tags/数据类型.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%9F%E8%AF%9D%E4%B8%8D%E5%A4%9A%E8%AF%B4%EF%BC%8C%E5%85%88%E7%9C%8B%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E3%80%82%EF%BC%88%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%EF%BC%89\"><span class=\"toc-text\">废话不多说，先看一个例子。（基于C语言）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">输出结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E6%9D%A5%E7%BB%99%E5%A4%A7%E5%AE%B6%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E6%B5%AE%E7%82%B9%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A1%A8%E7%8E%B0%E5%87%BA%E8%BF%99%E6%A0%B7%E7%9A%84%E7%89%B9%E6%80%A7%E5%91%A2%E3%80%82\"><span class=\"toc-text\">接下来我来给大家解释一下浮点型为什么表现出这样的特性呢。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E9%83%A8%E7%9A%84%E8%A1%A8%E7%8E%B0%E6%96%B9%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">浮点数在计算机内部的表现方法：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-S-M-2-E\"><span class=\"toc-text\">(-1)^S M * 2^E*</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E5%BD%92%E6%96%87%E7%AB%A0%E6%9C%80%E5%88%9D%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BB%A5%E5%8D%81%E8%BF%9B%E5%88%B60-1%E4%B8%BA%E4%BE%8B\"><span class=\"toc-text\">回归文章最初，我们以十进制0.1为例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%B0%E6%AD%A4%E6%88%91%E4%BB%AC%E5%AF%B9%E4%BA%8E%E5%8D%95%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A6%82%E4%BD%95%E5%AD%98%E5%B0%B1%E5%B7%B2%E7%BB%8F%E8%AE%B2%E5%AE%8C%E4%BA%86%EF%BC%8C%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%B0%B1%E6%98%AF%E5%8F%96%E5%87%BA%E6%9D%A5%E3%80%82\"><span class=\"toc-text\">到此我们对于单精度浮点数如何存就已经讲完了，接下来就是取出来。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A4%E6%97%B6%E6%88%91%E4%BB%AC%E5%9B%9E%E5%BD%92%E6%96%87%E7%AB%A0%E5%BC%80%E5%A4%B4%E3%80%82\"><span class=\"toc-text\">此时我们回归文章开头。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C-1\"><span class=\"toc-text\">输出结果</span></a></li></ol>","author":{"name":"混游","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/b4023df7909449aba6b979e76cefa47b.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>座右铭：比昨天强一点</b>","socials":{"github":"https://github.com/xuruijiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"https://www.zhihu.com/people/ye-he-52-45","csdn":"https://c-p-p.blog.csdn.net/","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/374838922?spm_id_from=333.1007.0.0"}}}},"mapped":true,"prev_post":{"title":"Mac Clion无法调适的可能原因","uid":"15df77317634e495e1c0f843aee8d294","slug":"Mac-Clion无法调适","date":"2023-02-27T10:53:51.000Z","updated":"2023-02-28T08:57:31.414Z","comments":true,"path":"api/articles/Mac-Clion无法调适.json","keywords":null,"cover":"/photos/blog4.png","text":" 🐰作者简介：一位普通高校的在校学生，致力于提高自己的编程能力。 🍌个人主页：[比昨天强一點的博客_CSDN博客-领域博主](https:&#x2F;&#x2F;c-p-p.blog.csdn.net&#x2F; &quot;比昨天强一點的博客_CSDN博客-领域博主&quot;...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Clion","slug":"Clion","count":1,"path":"api/tags/Clion.json"},{"name":"Mac","slug":"Mac","count":1,"path":"api/tags/Mac.json"}],"author":{"name":"混游","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/b4023df7909449aba6b979e76cefa47b.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>座右铭：比昨天强一点</b>","socials":{"github":"https://github.com/xuruijiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"https://www.zhihu.com/people/ye-he-52-45","csdn":"https://c-p-p.blog.csdn.net/","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/374838922?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"C语言，万字入门","uid":"20fa7a80c246c3a1e3b3bbe114dc196d","slug":"C语言万字文章入门","date":"2023-02-18T13:18:50.000Z","updated":"2023-02-27T06:57:01.884Z","comments":true,"path":"api/articles/C语言万字文章入门.json","keywords":null,"cover":"/photos/blog2.jpg","text":" 🐰作者简介：一位普通高校的在校学生，致力于提高自己的编程能力。 🍌个人主页：[比昨天强一點的博客_CSDN博客-领域博主](https:&#x2F;&#x2F;c-p-p.blog.csdn.net&#x2F; &quot;比昨天强一點的博客_CSDN博客-领域博主&quot;...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"author":{"name":"混游","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/b4023df7909449aba6b979e76cefa47b.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>座右铭：比昨天强一点</b>","socials":{"github":"https://github.com/xuruijiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"https://www.zhihu.com/people/ye-he-52-45","csdn":"https://c-p-p.blog.csdn.net/","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/374838922?spm_id_from=333.1007.0.0"}}}}}}